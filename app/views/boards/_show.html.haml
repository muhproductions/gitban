- @board = board
.board_flex
  - @board.columns.each do |column|
    %div.board_column
      .card.light-blue.darken-2
        .card-content{style: 'padding-bottom: 10px;'}
          .card-title.white-text
            = column.name
            - if column.max
              .right
                %b{class: column.tasks.count >= column.max ? 'red-text' : ''}
                  = column.tasks.count
                of
                %b= column.max
            - else
              .right
                %b= column.tasks.count


            %hr
          %ul.drag{id: "col-#{column.id}"}
            - column.tasks.order('position').each do |task|
              %li
                = render partial: 'shared/task_card', locals: { task: task, animate: task_id}
          .red.center-align{id: "scrollable-#{column.id}", style: 'display: none;'}
            %i.fa.fa-chevron-circle-down
            &nbsp;
            scroll down
            &nbsp;
            %i.fa.fa-chevron-circle-down
          .green.center-align{id: "at-bottom-#{column.id}", style: 'display: none; visible: hidden;'}
            %i.fa.fa-chevron-circle-up
            &nbsp;
            that's it
            &nbsp;
            %i.fa.fa-chevron-circle-up

:javascript
  (function($) {
    $.fn.hasScrollBar = function() {
      return this.get(0).scrollHeight > this.height();
    }
  })(jQuery);

  $('.modal-trigger').leanModal();

  $('[id*=col]').map(function(i,e){
    var id = e.id.substring(4);
    if ($(e).hasScrollBar()) {
      $('#scrollable-'+id).show()
    }
  });

  $('[id*=col]').bind('scroll', check_if_bottom);

  function check_if_bottom(e) {
    var elem = $(e.currentTarget);
    var id = elem[0].id.substring(4);
    if (elem[0].scrollHeight - elem.scrollTop() == elem.outerHeight()) {
      $('#scrollable-'+id).hide()
      $('#at-bottom-'+id).show()
    } else {
      $('#scrollable-'+id).show()
      $('#at-bottom-'+id).hide()
    }
  }

  $('[id*=col]').sortable({
    connectWith: '.drag',
    stop: function(ev, ui){
      var el = ui.item[0].children[0];
      var source = ev.target;
      var target = $(el).parents().eq(1)[0]

      // Update Task position
      var task_id = el.id;
      var task_position = $(el).index();
      var column_id = target.id.substring(4);

      var pos = {};
      pos[target.id] = [];
      pos[source.id] = [];

      $(target).children().map(function(){
        var id = $(this).children()[0].id;
        pos[target.id].push(id);
      });
      if (source.id != target.id) {
        $(source).children().map(function(){
          var id = $(this).children()[0].id;
          pos[source.id].push(id);
        });
      }

      $.ajax({
          url: "/tasks/" + task_id,
          type: "PATCH",
          data: {task: {
                   position: task_position,
                   column_id: column_id},
                 authenticity_token: '#{form_authenticity_token}',
                 positions: pos},
          success: function(resp){
            App.boards.moved(#{@board.id}, task_id);
          },
          error: function(resp){
            console.log(resp);
            App.boards.refresh(#{@board.id});
          }
      });
      if(column_id == -1) {
        $(el).remove();
      }
    }
  });
